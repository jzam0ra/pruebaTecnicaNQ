# serializer version: 1
# name: test_glue_app_stack_snapshot
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536': dict({
        'DependsOn': list([
          'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF',
          'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265',
        ]),
        'Properties': dict({
          'Code': dict({
            'S3Bucket': dict({
              'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1',
            }),
          }),
          'Environment': dict({
            'Variables': dict({
              'AWS_CA_BUNDLE': '/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem',
            }),
          }),
          'Handler': 'index.handler',
          'Layers': list([
            dict({
              'Ref': 'PopulatelambdaBucketAwsCliLayer9FD2CBCF',
            }),
          ]),
          'Role': dict({
            'Fn::GetAtt': list([
              'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265',
              'Arn',
            ]),
          }),
          'Runtime': 'python3.9',
          'Timeout': 900,
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1',
                        }),
                      ]),
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1',
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                  's3:DeleteObject*',
                  's3:PutObject',
                  's3:PutObjectLegalHold',
                  's3:PutObjectRetention',
                  's3:PutObjectTagging',
                  's3:PutObjectVersionTagging',
                  's3:Abort*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  'arn:aws:s3:::s3-scripts-bucket-390403866377',
                  'arn:aws:s3:::s3-scripts-bucket-390403866377/*',
                ]),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF',
          'Roles': list([
            dict({
              'Ref': 'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'PopulatelambdaBucketAwsCliLayer9FD2CBCF': dict({
        'Properties': dict({
          'Content': dict({
            'S3Bucket': dict({
              'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1',
            }),
          }),
          'Description': '/opt/awscli/aws',
        }),
        'Type': 'AWS::Lambda::LayerVersion',
      }),
      'PopulatelambdaBucketCustomResourceEA355E6C': dict({
        'DeletionPolicy': 'Delete',
        'Properties': dict({
          'DestinationBucketName': 's3-scripts-bucket-390403866377',
          'Prune': False,
          'ServiceToken': dict({
            'Fn::GetAtt': list([
              'CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536',
              'Arn',
            ]),
          }),
          'SourceBucketNames': list([
            dict({
              'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1',
            }),
          ]),
          'SourceObjectKeys': list([
            'ff75372ec91838d1a1e0eff2df6ab6c5eac524c1d9a2ef1eb972824e543c24fd.zip',
          ]),
        }),
        'Type': 'Custom::CDKBucketDeployment',
        'UpdateReplacePolicy': 'Delete',
      }),
      'lamdataextraction': dict({
        'DeletionPolicy': 'Retain',
        'DependsOn': list([
          'PopulatelambdaBucketAwsCliLayer9FD2CBCF',
          'PopulatelambdaBucketCustomResourceEA355E6C',
        ]),
        'Properties': dict({
          'Architectures': list([
            'x86_64',
          ]),
          'Code': dict({
            'S3Bucket': 's3-scripts-bucket-390403866377',
          }),
          'Description': '',
          'EphemeralStorage': dict({
            'Size': 1024,
          }),
          'FunctionName': 'lam_data_extraction',
          'Handler': 'lambda_function.lambda_handler',
          'Layers': list([
            'arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:15',
          ]),
          'MemorySize': 1024,
          'Role': 'arn:aws:iam::390403866377:role/service-role/first-test-role-vn00mm7y',
          'Runtime': 'python3.12',
          'Tags': list([
            dict({
              'Key': 'Name',
              'Value': 'lam_data_extraction',
            }),
          ]),
          'Timeout': 300,
        }),
        'Type': 'AWS::Lambda::Function',
        'UpdateReplacePolicy': 'Retain',
      }),
      'laminsertdatacatalog': dict({
        'DeletionPolicy': 'Retain',
        'DependsOn': list([
          'PopulatelambdaBucketAwsCliLayer9FD2CBCF',
          'PopulatelambdaBucketCustomResourceEA355E6C',
        ]),
        'Properties': dict({
          'Architectures': list([
            'x86_64',
          ]),
          'Code': dict({
            'S3Bucket': 's3-scripts-bucket-390403866377',
          }),
          'Description': '',
          'EphemeralStorage': dict({
            'Size': 1024,
          }),
          'FunctionName': 'lam_insert_data_catalog',
          'Handler': 'lambda_function.lambda_handler',
          'Layers': list([
            'arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:15',
          ]),
          'MemorySize': 1024,
          'Role': 'arn:aws:iam::390403866377:role/service-role/first-test-role-vn00mm7y',
          'Runtime': 'python3.12',
          'Tags': list([
            dict({
              'Key': 'Name',
              'Value': 'lam_insert_data_catalog',
            }),
          ]),
          'Timeout': 300,
        }),
        'Type': 'AWS::Lambda::Function',
        'UpdateReplacePolicy': 'Retain',
      }),
      'lamtransformarprecipitaciones': dict({
        'DeletionPolicy': 'Retain',
        'DependsOn': list([
          'PopulatelambdaBucketAwsCliLayer9FD2CBCF',
          'PopulatelambdaBucketCustomResourceEA355E6C',
        ]),
        'Properties': dict({
          'Architectures': list([
            'x86_64',
          ]),
          'Code': dict({
            'S3Bucket': 's3-scripts-bucket-390403866377',
          }),
          'Description': '',
          'EphemeralStorage': dict({
            'Size': 1024,
          }),
          'FunctionName': 'lam_transformar_precipitaciones',
          'Handler': 'lambda_function.lambda_handler',
          'Layers': list([
            'arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:15',
          ]),
          'MemorySize': 1024,
          'Role': 'arn:aws:iam::390403866377:role/service-role/first-test-role-vn00mm7y',
          'Runtime': 'python3.12',
          'Tags': list([
            dict({
              'Key': 'Name',
              'Value': 'lam_transformar_precipitaciones',
            }),
          ]),
          'Timeout': 300,
        }),
        'Type': 'AWS::Lambda::Function',
        'UpdateReplacePolicy': 'Retain',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
